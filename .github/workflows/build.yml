name: Build

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
  release:
    types:
      - published
  schedule:
    # Run this workflow each Monday at midnight even if no other
    # events happen, to guarantee that it completes successfully
    # in the latest Rust toolchain versions
    - cron: '0 0 * * MON'

env:
  CARGO_TERM_COLOR: always
  CONST_RANDOM_SEED: ${{ secrets.CONST_RANDOM_SEED }}

jobs:
  static-analysis:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy
          default: true

      - name: Install GStreamer libraries and development packages
        run: |
          sudo apt-get update
          sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Clippy check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cargo deny check
        uses: ComunidadAylas/cargo-deny-action@main

      - name: Format Rust source code
        run: cargo fmt

      - name: Commit and push Rust source code format changes
        uses: EndBug/add-and-commit@v7
        with:
          message: 'Format Rust source code using rustfmt'
          author_name: github-actions[bot]
          author_email: 41898282+github-actions[bot]@users.noreply.github.com

  linux-x64-gnu:

    runs-on: ubuntu-latest

    container: debian:bullseye-slim

    env:
      CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Install development packages, GStreamer libraries, GStreamer development packages and documentation generation packages
        run: |
          apt-get update
          # curl is required by rustup
          apt-get install -yq build-essential git curl \
                              gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
                              libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
                              markdown html2text

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.CARGO_BUILD_TARGET }}
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install cargo-deb
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deb
          version: latest

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Generate Debian package
        run: ./scripts/build_deb.sh --target ${{ env.CARGO_BUILD_TARGET }} -- -Z build-std

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: 'PackSquash executable (Linux, x64, glibc)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

      - name: Upload Debian package
        uses: actions/upload-artifact@v2
        with:
          name: 'Debian package (amd64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/debian/*.deb

  linux-x64-musl:

    runs-on: ubuntu-latest

    container: alpine:latest

    env:
      CARGO_BUILD_TARGET: x86_64-unknown-linux-musl

    steps:
      - name: Install development packages, GStreamer libraries and GStreamer development packages
        run: |
          apk update
          # curl is required by rustup
          apk add build-base git curl \
                  gstreamer-dev gst-plugins-base-dev \
                  gst-plugins-good gst-plugins-bad

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.CARGO_BUILD_TARGET }}
          profile: minimal

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: 'PackSquash executable (Linux, x64, musl)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

  windows-x64-gnu:

    runs-on: windows-latest

    env:
      CARGO_BUILD_TARGET: x86_64-pc-windows-gnu

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.CARGO_BUILD_TARGET }}
          override: true
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install GStreamer libraries and GStreamer development packages
        run: |
          Invoke-WebRequest -Uri 'https://gstreamer.freedesktop.org/data/pkg/windows/1.19.1/mingw/gstreamer-1.0-devel-mingw-x86_64-1.19.1.msi' -OutFile 'gstreamer-1.0-devel-mingw-x86_64.msi'
          Start-Process msiexec.exe -ArgumentList '/i gstreamer-1.0-devel-mingw-x86_64.msi /qn' -Wait
          "PKG_CONFIG_PATH=C:\gstreamer\1.0\mingw_x86_64\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $tmp_file = New-TemporaryFile | Rename-Item -NewName { $_.Name -replace '.tmp', '.zip' } -PassThru
          Invoke-WebRequest -Uri 'https://ftp.rrze.uni-erlangen.de/xbmc/build-deps/win32/mingw-msys/pkg-config-lite-0.28-1_bin-win32.zip' -OutFile $tmp_file
          $tmp_file | Expand-Archive -DestinationPath "$env:GITHUB_WORKSPACE\pkg-config-lite-0.28-1" -Force
          $tmp_file | Remove-Item
          "$env:GITHUB_WORKSPACE\pkg-config-lite-0.28-1\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Invoke-WebRequest -Uri 'https://gstreamer.freedesktop.org/data/pkg/windows/1.19.1/mingw/gstreamer-1.0-mingw-x86_64-1.19.1.msi' -OutFile 'gstreamer-1.0-mingw-x86_64.msi'
          Start-Process msiexec.exe -ArgumentList '/i gstreamer-1.0-mingw-x86_64.msi /qn' -Wait
          "C:\gstreamer\1.0\mingw_x86_64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Set binary resource data
        run: target/set_executable_resource_data.ps1

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: 'PackSquash executable (Windows, x64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash.exe

  macos-x64-darwin:

    runs-on: macos-11

    env:
      CARGO_BUILD_TARGET: x86_64-apple-darwin

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ env.CARGO_BUILD_TARGET }}
          override: true
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install GStreamer libraries and GStreamer development packages
        run: brew install gst-plugins-good gst-plugins-bad

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: 'PackSquash executable (macOS, x64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

  linux-aarch64-gnu:

    runs-on: ubuntu-latest

    container: debian:bullseye-slim

    env:
      CARGO_BUILD_TARGET: aarch64-unknown-linux-gnu
      PKG_CONFIG_ALLOW_CROSS: 1
      PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Install development packages, cross-compilation GCC toolchain, GStreamer libraries, GStreamer development packages and documentation generation packages
        run: |
          dpkg --add-architecture arm64
          apt-get update
          # lizlzma-dev is required by cargo-deb. curl is required by rustup
          apt-get install -yq build-essential git liblzma-dev curl \
                              gcc-aarch64-linux-gnu libgstreamer1.0-dev:arm64 libgstreamer-plugins-base1.0-dev:arm64 \
                              qemu-user gstreamer1.0-plugins-good:arm64 gstreamer1.0-plugins-bad:arm64 \
                              markdown html2text

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ env.CARGO_BUILD_TARGET }}
          profile: minimal
          components: rust-src

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Install cargo-deb
        uses: actions-rs/install@v0.1
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
        with:
          crate: cargo-deb
          version: latest

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ env.CARGO_BUILD_TARGET }} -Z build-std --release

      - name: Generate Debian package
        run: ./scripts/build_deb.sh --target ${{ env.CARGO_BUILD_TARGET }} -- -Z build-std

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: 'PackSquash executable (Linux, AArch64-ARM64, glibc)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash

      - name: Upload Debian package
        uses: actions/upload-artifact@v2
        with:
          name: 'Debian package (arm64)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/debian/*.deb

  linux-aarch64-musl:

    runs-on: ubuntu-latest

    container: alpine:latest

    env:
      CARGO_BUILD_TARGET: aarch64-unknown-linux-musl
      PKG_CONFIG_ALLOW_CROSS: 1
      GSTREAMER_SYSROOT: /tmp/gstreamer-aarch64-linux-musl

    steps:
      - name: Install cross-compilation GCC toolchain
        run: |
          # There is no readily available cross-compilation toolchain package in Alpine for our target.
          # There is no cross-compilation toolchain package available on Debian that targets musl, either.
          # So use a third-party toolchain. Luckily, a toolchain is just a partial sysroot we can merge directly
          apk update
          # curl is also required by rustup. GNU tar is needed due to the --wildcards option and --exclude'ing dirs
          apk add curl tar
          curl -o aarch64-linux-musl.tgz https://more.musl.cc/x86_64-linux-musl/aarch64-linux-musl-cross.tgz
          tar -xf aarch64-linux-musl.tgz --strip-components=1 --exclude=usr -C /
          rm -f aarch64-linux-musl.tgz

      - name: Install development packages and GStreamer development packages
        run: |
          apk add build-base git \
                  gstreamer-dev gst-plugins-base-dev

      - name: Create minimal sysroot with Aarch64 shared libraries and musl dynamic loader interpreter
        run: |
          # This is a nightmarish workaround for the lack of multiarch support in Alpine.
          # Debian has multiarch support, but the GStreamer arm64 Debian packages end up linking with glibc if done
          # badly, and do not define musl triplets for pkgconfig at all
          mkdir -p "$GSTREAMER_SYSROOT"
          echo 'aarch64' > /etc/apk/arch
          apk fetch -R --no-cache --allow-untrusted gstreamer-dev gst-plugins-base-dev musl
          for gstreamer_apk in *.apk; do
            tar -xf "$gstreamer_apk" -C "$GSTREAMER_SYSROOT" \
              --wildcards 'usr/lib/lib*.so*' --wildcards 'lib/lib*.so*' --wildcards 'lib/ld*.so*' \
              >/dev/null 2>&1 || true
          done
          rm -f *.apk
          echo 'x86_64' > /etc/apk/arch

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install latest Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ env.CARGO_BUILD_TARGET }}
          profile: minimal

      - name: Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: Build with optimized standard library
        uses: actions-rs/cargo@v1
        env:
          # GStreamer's x86_64 already sets up include paths and what libraries to link to nicely,
          # among other things. But there is no way on Earth it knows where to find the Aarch64
          # dynamic libraries we put in our custom sysroot, so let's help the gcc linker out with
          # that
          RUSTFLAGS: >
            -C link-args=-L${{ env.GSTREAMER_SYSROOT }}/lib
            -C link-args=-Wl,-rpath-link=${{ env.GSTREAMER_SYSROOT }}/lib
            -C link-args=-L${{ env.GSTREAMER_SYSROOT }}/usr/lib
            -C link-args=-Wl,-rpath-link=${{ env.GSTREAMER_SYSROOT }}/usr/lib
        with:
          command: build
          args: --release

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: 'PackSquash executable (Linux, aarch64, musl)'
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/packsquash
