{"name":"Packsquash","tagline":"A fast Minecraft resource pack lossy compressor. It is able to reduce resource pack ZIP file sizes up to 7 times, which allows for efficient distribution and slightly improved game performance.","body":"# PackSquash\r\nA fast Minecraft resource pack lossy compressor. It is able to reduce resource pack ZIP file sizes up to 7 times, which allows for efficient distribution and slightly improved game performance.\r\n\r\n## How does it work?\r\nPackSquash analyzes all the resource pack files in a directory, applying file type specific compression techniques to each one. Currently, these techniques are:\r\n\r\n* For PNG images: color quantization and palette generation (up to 256 colors), coupled with lossless bit depth, compression and color type reduction techniques. These operations are performed by the well known `imagequant` (used in `pngquant`) and `oxipng` libraries. For Minecraft style textures, up to 16x16 pixels in size, this results in dramatic size savings without any visual quality loss. The space savings also traslate to bigger textures, but they may incur in a slight visual quality loss, depending on how many colors it uses.\r\n* For OGG, FLAC, WAV and OGA sounds: downmixing to mono, resampling to 32 kHz and reencoding to OGG with a 40-96 kbit/s bitrate. These settings are good enough for in-game audio, and may improve game performance. Downmixing to mono also has the added benefit of allowing better 3D sound positioning for some use cases.\r\n* For JSON files: minification, by removing unneeded whitespace. As a side bonus, because minification requires parsing the JSON first, PackSquash also acts as a JSON file validator.\r\n* For Java property files (only if the -m flag is used): minification, by removing unneeded whitespace. As with JSON files, performing minification requires parsing the file, so PackSquash will show any validation error.\r\n\r\nIn addition to these techniques, all files are compressed in the generated ZIP file using the Zopfli algorithm, which is a state of the art DEFLATE encoder made by Google. It is tuned for very high space savings at the cost of performance, but tests with ~200 files resource packs show that it is still fast enough.\r\n\r\n## Download\r\nTo get PackSquash, you can build it yourself, like the CI action in this repository does. You will also need to install both the development and runtime GStreamer libraries manually.\r\n\r\nYou can get a pre-built release for 64-bit Windows, Linux and macOS systems from [here](https://github.com/ComunidadAylas/PackSquash/releases/latest).\r\n\r\n## Usage\r\n```\r\nPackSquash 0.1.2\r\nAlexTMjugador\r\nLossily compresses and prepares Minecraft resource packs for distribution\r\n\r\nUSAGE:\r\n    packsquash [FLAGS] [OPTIONS] <resource pack directory> [result ZIP file]\r\n\r\nFLAGS:\r\n    -c, --compress-compressed\r\n            If specified, resource files that are already compressed by design (like PNG and OGG files) will be\r\n            losslessly compressed again in the result ZIP file, unless that yields no significant space savings. This is\r\n            disabled by default, as it is expected that compressing already compressed file formats yields marginal\r\n            space savings that do not outweigh the time cost.\r\n    -a, --do-not-ignore-system-and-hiden-files\r\n            If specified, filenames which start with a dot or are likely generated by a software system (Windows,\r\n            VCS...) won't be skipped without a message.\r\n    -m, --include-mod-files\r\n            If specified, resource pack files ignored by vanilla Minecraft clients, but used by modified clients, will\r\n            be included and processed. Currently, setting this option enables processing and including OptiFine property\r\n            files in the output ZIP.\r\n    -o, --zip-obfuscation\r\n            If provided, the generated ZIP file will not be able to be read by some common programs, like WinRAR, 7-Zip\r\n            or unzip, but will function normally within Minecraft. It will also not duplicate some metadata in the ZIP\r\n            file, reducing its size a bit more. You shouldn't rely on this feature to keep the resources safe from\r\n            unauthorized ripping, and there is a low possibility that a future version of Minecraft rejects these ZIP\r\n            files. Therefore, it is disabled by default.\r\n    -h, --help                                    Prints help information.\r\n    -n, --skip-pack-icon\r\n            If specified, the pack icon in pack.png will be skipped and not included in the resulting file.\r\n\r\n    -V, --version                                 Prints version information\r\n\r\nOPTIONS:\r\n    -t, --threads <THREADS>    The number of resource pack files to process in parallel, in different threads. By\r\n                               default, a value appropriate to the CPU the program is running on is used, but you might\r\n                               want to decrease it to reduce memory usage.\r\n\r\nARGS:\r\n    <resource pack directory>    The directory where the resource pack to process is.\r\n    <result ZIP file>            The path to the resulting ZIP file, ready to be distributed.\r\n```\r\n\r\n## Potentials for improvement\r\nThese are some tweaks to the application which could further improve the compression it achieves, but are not scheduled for a release. Feel free to submit a PR with some (or all) of these changes!\r\n\r\n* Determine unused assets (models, textures, sounds...) by analyzing JSON files, and skip them from the result ZIP file.\r\n* Understand the OGG format more, to remove metadata from it.\r\n* Implement TTF minification.\r\n* Implement an \"append mode\", which only adds to a result ZIP file resource pack files which are newer than it (so the entire ZIP file isn't generated again if a single file changes).\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}