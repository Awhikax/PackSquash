name: Rust CI

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always
  GSTREAMER_1_0_ROOT_X86_64: C:\gstreamer\1.0\x86_64

jobs:
  build:

    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install latest Rust stable toolchain (Unix)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Install GStreamer build and runtime dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

    - name: Install Curl and pkgconfiglite (Windows)
      if: runner.os == 'Windows'
      run: choco install curl pkgconfiglite

    - name: Download GStreamer build dependencies (Windows)
      if: runner.os == 'Windows'
      run: curl https://gstreamer.freedesktop.org/data/pkg/windows/1.16.2/gstreamer-1.0-devel-msvc-x86_64-1.16.2.msi --output gstreamer-1.0-devel-msvc-x86_64.msi

    - name: Install GStreamer build dependencies (Windows)
      if: runner.os == 'Windows'
      run: msiexec /i gstreamer-1.0-devel-msvc-x86_64.msi /qn

    - name: Install GStreamer build and runtime dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install gstreamer gst-plugins-base

    - name: Clippy check (Linux)
      if: runner.os == 'Linux'
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -- -D warnings -A clippy::unreadable_literal 

    - name: Release build (Unix)
      if: runner.os != 'Windows'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release

    - name: Release build (Windows)
      if: runner.os == 'Windows'
      uses: actions-rs/cargo@v1
      env:
        PKG_CONFIG_PATH: C:\gstreamer\1.0\x86_64\lib\pkgconfig
      with:
        command: build
        args: --release

    - name: Strip debugging symbols from binary (Unix)
      if: runner.os != 'Windows'
      run: strip target/release/packsquash

    - name: Upload executable artifact (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: 'PackSquash executable (${{ runner.os }})'
        path: target/release/packsquash

    - name: Upload executable artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: 'PackSquash executable (${{ runner.os }})'
        path: target/release/packsquash.exe
